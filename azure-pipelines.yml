# Sample Azure DevOps pipeline
# Showcasing integration of twistcli scanning

# This sample relies on environment variables for connectivity to Twistlock

# TL_USER:  The Twistlock user with the CI User role
# TL_PASS:  The password for this user account
# TL_CONSOLE_URL:  The base URL for the console -- http://console.<my_company>.com:8083 -- without a trailing /

# First, build our image
# Use a Linux-based agent such as Ubuntu 16.04

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'my_tweet_app:$(build.buildId)'

steps:
- script: docker build -f Dockerfile -t $(imageName) .
  displayName: 'docker build'
  
# Use a script step to pull twistcli and scan the image that was built

- task: UniversalPackages@0
  inputs:
    command: 'download'
    downloadDirectory: '$(System.DefaultWorkingDirectory)'
    feedsToUse: 'internal'
    vstsFeed: 'twistcli'
    vstsFeedPackage: 'twistcli'
    vstsPackageVersion: '19.3.321'
    feedsToUsePublish: 'internal'
    versionOption: 'patch'

- task: CmdLine@2
  inputs:
    script: 'sudo mv $(System.DefaultWorkingDirectory)/twistcli /usr/bin/twistcli &&
      sudo chmod +x /usr/bin/twistcli'

- task: twistcli-scan@1
  inputs:
    scanType: 'images'
    twistlockService: 'My Twistlock Console'
    vulnerabilityThreshold: 'high'
    onlyFixed: false
    gracePeriod: '0'
    complianceThreshold: 'critical'
  
- script: docker tag $(imageName) securethecloud/my_tweet_app:$(build.buildId)
  displayName: 'docker tag'

- script: docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
  displayName: 'docker login to DockerHub'

- script: docker push securethecloud/my_tweet_app:$(build.buildId)
  displayName: 'docker push to DockerHub'
  

